@{
    ViewData["Title"] = "Calls History";
    var today = DateTime.Now.ToString("yyyy-MM-dd");
    var yesterday = DateTime.Now.AddDays(-1).ToString("yyyy-MM-dd");
}



<div class="container mt-5">
    <h2 class="mb-4">@ViewData["Title"]</h2>

    <form id="cdrForm" class="needs-validation" novalidate>
        <div class="row">
            <div class="col-md-3 mb-3">
                <label for="startDate">Start Date</label>
                <input type="date" class="form-control" id="startDate" name="startDate" required value="@yesterday" />
                <div class="invalid-feedback">
                    Please select a start date.
                </div>
            </div>
            <div class="col-md-3 mb-3">
                <label for="endDate">End Date</label>
                <input type="date" class="form-control" id="endDate" name="endDate" required value="@today" />
                <div class="invalid-feedback">
                    Please select an end date.
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-2">
                <button class="btn btn-primary" type="submit">Get CDR List</button>
            </div>
            <div class="col-md-2">
                <div id="spinner" class="spinner-border text-danger" role="status" style="display: none;">
                    <span class="sr-only"></span>
                </div>
            </div>
        </div>
    </form>

    <!-- Modal for audio player -->
    <div class="modal fade" id="audioModal" tabindex="-1" aria-labelledby="audioModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="audioModalLabel">Audio Player</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <audio id="audioPlayer" controls></audio>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    @* Model for Transcription *@
    <div class="modal fade" id="transcriptionModal" tabindex="-1" aria-labelledby="transcriptionModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="transcriptionModalLabel">Transcription</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <pre id="transcriptionText"></pre>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>


    <div class="table-responsive mt-4">
        <table id="cdrTable" class="table table-striped table-bordered" style="width:100%">
            <thead>
                <tr>
                    <th>Record ID</th>
                    <th>Unique ID</th>
                    <th>Record Group</th>
                    <th>Caller Number</th>
                    <th>Receiver Number</th>
                    <th>Start Date</th>
                    <th>End Date</th>
                    <th>Duration</th>
                    <th>Action</th> <!-- Add a new column for the play button -->
                    <th>Transcribe</th> <!-- Add a new column for the play button -->
                </tr>
            </thead>
            <tbody>
            </tbody>
        </table>
    </div>
</div>

<style>
    #transcriptionModal .modal-dialog {
        max-width: 80%;
    }

    #transcriptionModal .modal-body {
        word-wrap: break-word;
    }

    #transcriptionText {
        white-space: pre-wrap;
        word-wrap: break-word;
    }
</style>



@section Scripts {
    <script>
        $(document).ready(function () {
            var table = $('#cdrTable').DataTable();
            //Event Listner for Transcribe Button
            $(document).on('click', '.transcribe-button', function () {
                var recordGroup = $(this).data('recordgroup');
                var uniqueId = $(this).data('uniqueid');
                var recordId = $(this).data('recordid');

                $.ajax({
                    url: '/Recording/PlayRecording',
                    type: 'GET',
                    data: {
                        recordgroup: recordGroup,
                        uniqueid: uniqueId,
                        recordid: recordId
                    },
                    success: function (response) {
                        let responseData = JSON.parse(response.data);
                        if (responseData && responseData.data && responseData.data.data) {
                            // Extract the audio data from the parsed response data
                            var audioData = responseData.data.data;
                            console.log(audioData)
                            $.ajax({
                                url: '/Transcription/TranscribeAudio',
                                type: 'POST',
                                data: { encodedAudioData: audioData },
                                timeout: 0,
                                success: function (transcriptionResponse) {
                                    console.log(transcriptionResponse);
                                    if (transcriptionResponse.transcription) {
                                        // Display transcription in the modal
                                        $('#transcriptionText').text(transcriptionResponse.transcription);
                                        $('#transcriptionModal').modal('show');
                                    } else {
                                        console.error('Invalid transcription response:', transcriptionResponse);
                                    }
                                },
                                error: function (xhr, status, error) {
                                    console.error('Transcription error:', status, error);
                                }
                            });
                        } else {
                            console.error('Invalid response format:', response);
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error('Error playing recording:', status, error);
                    }
                });
            });



            // Event listener for play button clicks
            $(document).on('click', '.play-button', function () {
                var recordgroup = $(this).data('recordgroup');
                var uniqueid = $(this).data('uniqueid');
                var recordid = $(this).data('recordid');

                // Make AJAX call to play the recording
                $.ajax({
                    url: '/Recording/PlayRecording?recordgroup=' + recordgroup + '&uniqueid=' + uniqueid + '&recordid=' + recordid,
                    type: 'GET',
                    success: function (response) {
                        let responseData = JSON.parse(response.data);
                        if (responseData && responseData.data.data) {
                            // Extract the audio data from the parsed response data
                            var audioData = responseData.data.data;

                            // Set the src attribute to a data URL representing the audio data
                            $('#audioPlayer').attr('src', 'data:audio/wav;base64,' + audioData);

                            // Open the modal
                            $('#audioModal').modal('show');
                        }
                    },
                    error: function (xhr, status, error) {
                        console.log('Error playing recording:', error);
                    }
                });
            });

            // Event listener for modal close event
            $('#audioModal').on('hidden.bs.modal', function (e) {
                // Pause the audio when the modal is closed
                $('#audioPlayer')[0].pause();
            });

            $('#cdrForm').on('submit', function (event) {
                event.preventDefault();
                const startDate = $('#startDate').val();
                const endDate = $('#endDate').val();
                // Validation check for start date and end date
                if (new Date(startDate) > new Date(endDate)) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Invalid Date Range',
                        text: 'Start date cannot be greater than end date.',
                    });
                    return;
                }
                $('#spinner').show(); // Show the spinner
                let apiUrl = `/Recording/RecordingListData?startDate=${startDate}&endDate=${endDate}`;
                console.log(apiUrl);
                // Make an AJAX call to the controller action
                $.ajax({
                    url: apiUrl,
                    type: 'GET',
                    success: function (data) {
                        // Check if data format is as expected
                        if (data && data.success && data.data) {
                            try {
                                const parsedData = JSON.parse(data.data); // Parse the data.data property
                                if (Array.isArray(parsedData.data)) {
                                    table.clear().draw();
                                    parsedData.data.forEach(record => {
                                        addTableRow(table, record);
                                    });
                                } else {
                                    throw new Error("Data format is not as expected");
                                }
                            } catch (error) {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Data Error',
                                    text: 'Error parsing data: ' + error.message,
                                });
                            }
                        } else {
                            throw new Error("Data format is not as expected");
                        }
                    },
                    error: function (xhr, status, error) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Fetch Error',
                            text: 'Error fetching data: ' + error,
                        });
                    },
                    complete: function () {
                        $('#spinner').hide(); // Hide the spinner
                    }
                });
            });

            // Function to add a table row for a record
            function addTableRow(table, record) {
                var row = [
                    record.recordid,
                    record.uniqueid,
                    record.recordgroup,
                    record.snumber,
                    record.dnumber,
                    new Date(record.start * 1000).toLocaleString(),
                    new Date(record.end * 1000).toLocaleString(),
                    record.totaltime + ' seconds'
                ];

                // Add a play button to the row
                row.push('<button class="btn btn-primary play-button" data-recordgroup="' + record.recordgroup + '" data-uniqueid="' + record.uniqueid + '" data-recordid="' + record.recordid + '">Play</button>');
                row.push('<button class="btn btn-primary transcribe-button" data-recordgroup="' + record.recordgroup + '" data-uniqueid="' + record.uniqueid + '" data-recordid="' + record.recordid + '">Transribe</button>');

                table.row.add(row).draw();
            }
        });
    </script>
}
