@{
    ViewData["Title"] = "Calls History";
    var today = DateTime.Now.ToString("yyyy-MM-dd");
    var yesterday = DateTime.Now.AddDays(-1).ToString("yyyy-MM-dd");
}

<div class="container mt-5">
    <h2 class="mb-4">@ViewData["Title"]</h2>

    <form id="cdrForm" class="needs-validation" novalidate>
        <div class="row">
            <div class="col-md-3 mb-3">
                <label for="startDate">Start Date</label>
                <input type="date" class="form-control" id="startDate" name="startDate" required value="@yesterday" />
                <div class="invalid-feedback">
                    Please select a start date.
                </div>
            </div>
            <div class="col-md-3 mb-3">
                <label for="endDate">End Date</label>
                <input type="date" class="form-control" id="endDate" name="endDate" required value="@today" />
                <div class="invalid-feedback">
                    Please select an end date.
                </div>
            </div>
            <div class="col-md-3 mb-3">
                <label for="callType">Call Type</label>
                <select class="form-control" id="callType">
                    <option value="">All</option>
                    <option value="in">Inbound</option>
                    <option value="internal">Internal</option>
                    <option value="out">Outbound</option>
                </select>
            </div>

            <div class="col-md-3 mb-3">
                <label for="status">Status</label>
                <select class="form-control" id="status">
                    <option value="">All</option>
                    <option value="answer">Answer</option>
                    <option value="cancel">Cancel</option>
                </select>
            </div>
        </div>
        <div class="row">
            <div class="col-md-2">
                <button class="btn btn-primary" type="submit">Get CDR List</button>
            </div>
            <div class="col-md-2">
                <div id="spinner" class="spinner-border text-danger" role="status" style="display: none;">
                    <span class="sr-only"></span>
                </div>
            </div>
        </div>
    </form>

    <div class="table-responsive mt-4">
        <table id="cdrTable" class="table table-striped table-bordered" style="width:100%">
            <thead>
                <tr>
                    <th>Customer</th>
                    <th>Caller Name</th>
                    <th>Caller ID</th>
                    <th>Called Number</th>
                    <th>Start Time</th>
                    <th>End Time</th>
                    <th>Duration</th>
                    <th>Status</th>
                    <th>Cost</th>
                </tr>
            </thead>
            <tbody>
            </tbody>
        </table>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            var table = $('#cdrTable').DataTable();

            $('#cdrForm').on('submit', function (event) {
                event.preventDefault();
                const startDate = $('#startDate').val();
                const endDate = $('#endDate').val();
                const callType = $('#callType').val(); // Get selected call type
                const status = $('#status').val(); // Get selected call type

                // Validation check for start date and end date
                if (new Date(startDate) > new Date(endDate)) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Invalid Date Range',
                        text: 'Start date cannot be greater than end date.',
                    });
                    return;
                }

                $('#spinner').show(); // Show the spinner

                // Construct the API URL with call type
                let apiUrl = `/Calls/CdrListData?startDate=${startDate}&endDate=${endDate}`;
                if (callType) {
                    apiUrl += `&direction=${callType}`;
                }
                if(status){
                    apiUrl += `&status=${status}`;
                }

                console.log(apiUrl);

                // Make an AJAX call to the controller action
                $.ajax({
                    url: apiUrl,
                    type: 'GET',
                    success: function (data) {
                        console.log(data); // Log the entire data object

                        // Check if data format is as expected
                        if (data && data.success && data.data) {
                            try {
                                const parsedData = JSON.parse(data.data); // Parse the data.data property
                                if (Array.isArray(parsedData.data)) {
                                    table.clear().draw();
                                    parsedData.data.forEach(record => {
                                        addTableRow(table, record);
                                    });
                                } else {
                                    throw new Error("Data format is not as expected");
                                }
                            } catch (error) {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Data Error',
                                    text: 'Error parsing data: ' + error.message,
                                });
                            }
                        } else {
                            throw new Error("Data format is not as expected");
                        }
                    },
                    error: function (xhr, status, error) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Fetch Error',
                            text: 'Error fetching data: ' + error,
                        });
                    },
                    complete: function () {
                        $('#spinner').hide(); // Hide the spinner
                    }
                });
            });

            // Function to add a table row for a record
            function addTableRow(table, record) {
                table.row.add([
                    record.customer_name,
                    record.callername,
                    record.callerid_external,
                    record.dnumber,
                    new Date(record.start * 1000).toLocaleString(),
                    new Date(record.end * 1000).toLocaleString(),
                    record.totaltime,
                    record.status,
                    record.cost
                ]).draw();
            }
        });
    </script>
}
