@{
    ViewData["Title"] = "Phone List Panel";
}

<div class="container mt-5">
    <h2 class="mb-4">@ViewData["Title"]</h2>

    <form id="phoneForm" class="needs-validation" novalidate>
        <!-- Form elements for any filters can be added here if needed -->
        <div class="row">
            <div class="col-md-2">
                <button class="btn btn-primary" type="submit">Get Phone List</button>
            </div>
            <div class="col-md-2">
                <div id="spinner" class="spinner-border text-danger" role="status" style="display: none;">
                    <span class="sr-only"></span>
                </div>
            </div>
        </div>
    </form>

    <div class="table-responsive mt-4">
        <table id="phoneTable" class="table table-striped table-bordered" style="width:100%">
            <thead>
                <tr>
                    <th>Phone ID</th>
                    <th>Name</th>
                    <th>Caller ID Internal</th>
                    <th>Description</th>
                    <th>Status</th>
                </tr>
            </thead>
            <tbody>
            </tbody>
        </table>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            var table = $('#phoneTable').DataTable();

            $('#phoneForm').on('submit', function (event) {
                event.preventDefault();

                $('#spinner').show(); // Show the spinner

                // Construct the API URL
                let apiUrl = '/Phone/PhoneListPanelData';

                // Make an AJAX call to the controller action
                $.ajax({
                    url: apiUrl,
                    type: 'GET',
                    success: function (data) {
                        // Log the entire data object
                        console.log(data);

                        // Check if data format is as expected
                        if (data && data.success && data.data) {
                            try {
                                const parsedData = JSON.parse(data.data); // Parse the data.data property
                                if (parsedData.data && Array.isArray(parsedData.data)) {
                                    table.clear().draw();
                                    parsedData.data.forEach(record => {
                                        addTableRow(table, record);
                                    });
                                } else {
                                    throw new Error("Data format is not as expected");
                                }
                            } catch (error) {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Data Error',
                                    text: 'Error parsing data: ' + error.message,
                                });
                            }
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Data Error',
                                text: 'Error in the data response',
                            });
                        }
                    },
                    error: function (xhr, status, error) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Fetch Error',
                            text: 'Error fetching data: ' + error,
                        });
                    },
                    complete: function () {
                        $('#spinner').hide(); // Hide the spinner
                    }
                });
            });

            // Function to add a table row for a record
            function addTableRow(table, record) {
                let statusClass = record.registered ? 'text-success' : 'text-danger';
                table.row.add([
                    record.id,
                    record.name,
                    record.callerid_internal,
                    record.description,
                    `<span class="${statusClass}">${record.registered ? 'Active' : 'Inactive'}</span>`
                ]).draw();
            }
        });
    </script>
}
